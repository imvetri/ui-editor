[
  {
    "name": "DraggableComponent",
    "markup": "<div draggable=\"true\"  id=\"move\" style={state.style} ><h1>      Elements</h1><ResizableComponent /></div>",
    "events": [
      {
        "name": "onDragEnd",
        "reducer": "state.style.top = e.pageY +\"px\"state.style.left = e.pageX +\"px\"",
        "index": 0,
        "publishable": "",
        "publishName": "",
        "id": "move"
      }
    ],
    "state": "{ \"style\": {\"position\":\"fixed\",\"top\":\"400px\",\"left\":\"200px\"}}",
    "style": "#move h1{cursor: move;border: 1px solid white;}#move {border: 2px solid white;}",
    "children": [],
    "id": 44,
    "config": "{}"
  },
  {
    "name": "ParentComponent",
    "markup": "<div><div id=\"parent\"><ChildComponent /><ChildComponent /><ChildComponent /><ChildComponent /><ChildComponent /></div><div id=\"child\"></div></div>",
    "events": [
      {
        "name": "onDragEnter",
        "reducer": "e.currentTarget.style.border = \"1px solid white\";",
        "index": 0,
        "publishable": "",
        "publishName": "",
        "id": "parent"
      },
      {
        "name": "onDragLeave",
        "reducer": "e.currentTarget.style.border = \"\";",
        "index": 1,
        "publishable": "",
        "publishName": "",
        "id": "parent"
      },
      {
        "name": "onDragEnter",
        "reducer": "e.currentTarget.style.border = \"1px solid tomato\";",
        "index": 2,
        "publishable": "",
        "publishName": "",
        "id": "child"
      },
      {
        "name": "onDragLeave",
        "reducer": "e.currentTarget.style.border = \"\";",
        "index": 3,
        "publishable": "",
        "publishName": "",
        "id": "child"
      },
      {
        "name": "onDrop",
        "reducer": "let child = e.dataTransfer.getData(\"component-name\");console.log(child)debugger;let components = JSON.parse(localStorage.getItem(\"ui-editor\"))let parentName = \"ParentComponent\";let parentComponent = components.find(component=>component.name.includes(parentName))let parentTag = e.currentTarget.id;parentComponent.markup = parentComponent.markup.replace(`${parentTag}\">`,`${parentTag}\"><${child} />`)localStorage.setItem(\"ui-editor\",JSON.stringify(components));",
        "index": 4,
        "publishable": "",
        "publishName": "",
        "id": "parent"
      },
      {
        "name": "onDrop",
        "reducer": "let componentName =  e.dataTransfer.getData(\"component-name\")console.log(componentName)e.preventDefault();",
        "index": 7,
        "publishable": "",
        "publishName": "",
        "id": "child"
      },
      {
        "name": "onDragOver",
        "reducer": "e.preventDefault();",
        "publishable": "",
        "publishName": "",
        "id": "child"
      },
      {
        "name": "onDragOver",
        "reducer": "e.preventDefault();",
        "publishable": "",
        "publishName": "",
        "id": "parent"
      }
    ],
    "state": "{ }",
    "style": "#parent{background: yellow;height: 200px;width: 200px;}#child{background: tomato;height: 200px;width: 200px;}",
    "children": [],
    "id": 98,
    "config": "{}"
  },
  {
    "name": "ChildComponent",
    "markup": "<div>Child</div>",
    "events": [],
    "state": "{ }",
    "style": "",
    "children": [],
    "id": 923,
    "config": "{}"
  },
  {
    "name": "DragDrop",
    "markup": "<div><div>   <p id=\"source\" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" >Drop Zone</div></div>",
    "events": [
      {
        "name": "onDrop",
        "reducer": "e.currentTarget.style.background = \"lightyellow\";e.preventDefault();var data = e.dataTransfer.getData(\"text\");e.target.appendChild(document.getElementById(data));",
        "index": 0,
        "publishable": "",
        "publishName": "",
        "id": "target"
      },
      {
        "name": "onDragStart",
        "reducer": "e.dataTransfer.setData(\"text\", e.target.id);",
        "publishable": "",
        "publishName": "",
        "id": "source"
      },
      {
        "name": "onDragOver",
        "reducer": "e.preventDefault();",
        "publishable": "",
        "publishName": "",
        "id": "target"
      }
    ],
    "state": "{ }",
    "style": "  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }",
    "children": [],
    "id": 779,
    "config": "{}"
  },
  {
    "name": "OverflowUnits",
    "markup": "<div className=\"overflow\">  <span className=\"property\">    Overflow  </span>  <button className=\"value fa fa-eye\">  </button>  <button className=\"value fa fa-eye-slash\">  </button>  <button className=\"value fa fa-align-center\">  </button>  <button className=\"value selected\">    Auto  </button></div>",
    "events": [],
    "state": "{ }",
    "style": ".overflow{  height:20px;  width: 240px;  padding:4px;  background-color: rgb(64, 64, 64);  display: flex;  justify-content: space-around;  align-items: baseline;  user-select:none;}.property{  font-size: 11px;  font-family: Arial, sans-serif;  font-weight: 400;  letter-spacing: -0.2px;  color: rgb(139, 190, 250);  background: rgba(76, 152, 241, 0.15);}.value{  color: rgb(217, 217, 217);  background: rgb(94, 94, 94);  border: 1px solid rgb(51, 51, 51);}.selected{  background:rgb(43, 43, 43);  border: 1px solid rgb(33, 33, 33);}",
    "children": [],
    "id": 110,
    "config": "{}"
  },
  {
    "name": "UnitSize",
    "markup": "<div className=\"sizeUnit\"><input id=\"in\" value={state.value}/>  <select name=\"units\">    <option value=\"PX\">PX</option>    <option value=\"%\">%</option>    <option value=\"EM\">EM</option>    <option value=\"VW\">VW</option>    <option value=\"AUTO\">-</option>  </select></div>",
    "events": [
      {
        "name": "onChange",
        "reducer": "state.value = e.currentTarget.value;",
        "index": 0,
        "publishable": true,
        "publishName": "onUnitChanged",
        "id": "in"
      }
    ],
    "state": "{ \"value\":0}",
    "style": ".sizeUnit input,.sizeUnit  select{  border:1px solid rgb(33, 33, 33);  border-radius: 2px;  line-height: 22px;  background: rgb(43, 43, 43);  color:rgb(217, 217, 217);}.sizeUnit input {  height:24px;  width:36px;  vertical-align: bottom;  padding-left:3px;  border-right:none;  padding-bottom: 4px;}.sizeUnit select{  border-left:none;  height:24px;  display:inline-block;  width: 20px;  padding-left:4px;  margin-left: -5px;  font-size: 9px;  -webkit-appearance: none;}.sizeUnit select:hover{  color: white;}* {  box-sizing: border-box;}.sizeUnit {     display:inline-block;}",
    "children": [],
    "id": 671,
    "config": "{}"
  },
  {
    "name": "WidthSize",
    "markup": "<div><div className=\"width\">{state.value}</div><UnitSize /><OverflowUnits /></div>",
    "events": [
      {
        "name": "onUnitChanged",
        "reducer": "state.value = \"Height\"",
        "index": 0,
        "id": "component"
      }
    ],
    "state": "{\"value\":\"Width\",\"UnitSize\":{\"value\":10}}",
    "style": ".width{    display:inline-block;    width: 56px;    height: 24px;    color: #EBEBEB;    background: #636363;    font-size: 11px;    font-family: Arial, sans-serif;    font-weight: 400;    text-align: center;    box-sizing: border-box;    padding: 5px;}",
    "children": [],
    "id": 836,
    "config": "{\"UnitSize\":{\"overideState\":true}}"
  },
  {
    "name": "HelloComp",
    "markup": "<h1>{state.name}</h1>",
    "events": [],
    "state": "{ \"name\":\"Hello\"}",
    "style": "",
    "children": [],
    "id": 326,
    "config": "{}"
  }
]